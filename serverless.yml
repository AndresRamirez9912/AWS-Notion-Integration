service: time-webhook

frameworkVersion: "3"

custom:
  stage: ${opt:stage, self:provider.stage}
  settings:
    dev:
      STAGE: ${self:custom.stage}
      DYNAMODB_TABLE: time-entries-${self:custom.stage}
      REGION: ${self:provider.region}
    api:
      STAGE: ${self:custom.stage}
      DYNAMODB_TABLE: time-entries-${self:custom.stage}
      REGION: ${self:provider.region}
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev # default stage
  region: us-east-1
  environment: ${self:custom.settings.${self:custom.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.${self:custom.stage}.DYNAMODB_TABLE}

functions:
  createTimeEntry:
    handler: src/lambdas/createTimeEntry.handler
    events:
      - http:
          path: v1/time_entries
          method: post
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0
            type: token
            identitySource: method.request.header.Authorization

      - http:
          path: v1/time_entries/{id}
          method: put
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0
            type: token
            identitySource: method.request.header.Authorization

      - http:
          path: v1/time_entries/{id}
          method: delete
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0
            type: token
            identitySource: method.request.header.Authorization

  authorizerFunc:
    handler: src/lambdas/authorizer.handler
    environment: ${file(./env-auth.yml):${self:custom.stage}}

resources:
  Resources:
    TimeEntriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.settings.${self:custom.stage}.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline
  - serverless-dynamodb-local
